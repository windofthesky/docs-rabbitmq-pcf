---
title: Monitoring My Service
owner: <your group name> # <---- For example "London Services"
---

_This topic provides instructions for how to maintain service uptime and availability, including tasks such as:_

* _Backups and Recovery_
* _Monitoring, Metrics, Logging, Analysis, and Reports_
* _Troubleshooting_

_If the tasks are few and short, consider placing them on a single page called “Maintaining My Service.” If longer, use multiple pages named appropriately._

_The Redis service has an excellent example of a [monitoring topic](http://docs.pivotal.io/redis/monitoring.html)._

## <a id="monitoring"></a> Monitor My Service

This topic provides instructions for monitoring My Service for PCF using the metrics emitted from the [Loggregator Firehose](http://docs.pivotal.io/redis/monitoring.html). It also lists and describes those metrics.

Follow this procedure to monitor My Service:

1. Navigate to the Metrics configuration page...

## <a id="metrics"></a> My Service Metrics

My Service emits a number of metrics that can be used to monitor the health and performance of your My Service deployment.

### <a id="metric1"></a>  Metric 1

<table>
  <tbody>
  <tr>
    <td><i>Description</i></p></td>
    <td><i>&lt;description of metrics&gt;</i></p></td></tr>
  <tr><td><i>Significance</i></p></td>
    <td><i>&lt;significance of metrics&gt;</i></p></td></tr>
  <tr><td><i>Notes</i></p></td>
    <td><i>&lt;optional row containing additional notes&gt;</i></p></td></tr>
   </tbody>
</table>

### <a id="metric2"></a> Metric 2

<table>
  <tbody>
    <tr>
	    <td><i>Description</i></p></td>
	    <td><i>&lt;description of metrices&gt;</i></p></td>
    </tr>   
	<tr>
	    <td><i>Significance</i></p></td>
	    <td><i>&lt;significance of metrics&gt;</i></p></td>
    </tr>   
    <tr>
    	<td><i>Notes</i></p></td>
    	<td><i>&lt;optional row containing additional notes&gt;</i></p></td>
    </tr> 
   </tbody>
</table>

 _If you have a lot of metrics and don’t need to explain the significance or add notes, you can also use a single two-column table with headings "Metric Name" and "Description", examples [here](http://docs.pivotal.io/pivotalcf/loggregator/all_metrics.html)._

For general information about metrics in Pivotal Cloud Foundry, see [Logging and Metrics](http://docs.pivotal.io/pivotalcf/loggregator/index.html).

## <a id="troubleshooting"></a> Troubleshoot My Service

_List troubleshooting by symptom, explanation, and solution:_

### <a id="ipsec-installation-issues"></a> IPsec Installation Issues

#### Symptom
Unresponsive applications or incomplete responses, particularly for large payloads

#### Explanation: Packet Loss
IPsec packet encryption increases the size of packet payloads on host VMs. If the size of the larger packets exceeds the maximum transmission unit (MTU) size of the host VM, packet loss may occur when the VM forwards those packets.

If your VMs were created with an Amazon PV stemcell, the default MTU value is 1500 for both host VMs and the application containers. If your VMs were created with Amazon HVM stemcells, the default MTU value is 9001. Garden containers default to 1500 MTU.

#### Solution
Implement a 100 MTU difference between host VM and the contained application container, using one of the following approaches:

* Decrease the MTU of the application containers to a value lower than the MTU of the VM for that container. In the ERT tile configuration, click **Networking** and modify **Applications Network Maximum Transmission Unit (MTU) (in bytes)** before you deploy. Decrease it from the default value of 1454 to 1354.

* Increase the MTU of the application container VMs to a value greater than 1500. Pivotal recommends a headroom of 100. Run <code>ifconfig NETWORK-INTERFACE mtu MTU-VALUE</code> to make this change. Replace NETWORK-INTERFACE with the network interface used to communicate with other VMs For example:
<code>$ ifconfig NETWORK-INTERFACE mtu 1600</code>

<hr>



## <a id="logging"></a>Logging

In RabbitMQ&reg; for Pivotal Cloud Foundry (PCF) 1.6.0 and above, you can designate an external syslog endpoint for RabbitMQ logs through Ops Manager at deployment time by performing the following steps:

1. From the Ops Manager Installation Dashboard, click the RabbitMQ tile.
1. In the RabbitMQ tile, click the **Settings** tab.
1. Click **Syslog**.
1. Enter your syslog address and port.
1. Click **Save**.
1. Return to the Ops Manager Installation Dashboard and click **Apply Changes** to redeploy with the changes.

A correctly configured system emits metrics for all RabbitMQ and HAProxy nodes deployed in the service. You can identify logs from individual nodes by their index, which corresponds to the index of the RabbitMQ nodes displayed in Ops Manager:

* The logs for RabbitMQ server nodes follow the format <code>[job=rabbitmq-server-partition-GUID index=X]</code>
* The logs for HAproxy nodes follow the format <code>[job=rabbitmq-haproxy-partition-GUID index=X]</code>
* The logs for the RabbitMQ service broker follow the format <code>[job=rabbitmq-broker-partition-GUID index=X]</code>

RabbitMQ and HAProxy servers are configured to log at the <code>info</code> level, and capture errors, warnings and informational messages.

## <a id="heartbeats"></a>Heartbeats

In RabbitMQ for PCF 1.6 and above, the key system components periodically emit heartbeats for RabbitMQ server nodes, HAProxy nodes, and the Service Broker. The heartbeats are Boolean metrics: <code>1</code> means the system is available, and <code>0</code> or the absence of a heartbeat metric means the service is not responding and should be investigated.

The heartbeats are visible on the Firehose and look as follows:

- HAProxy heartbeat: <code> "/p-rabbitmq/haproxy/heartbeat" value:1 unit:"boolean" </code>
- RabbitMQ heartbeat: <code> "/p-rabbitmq/rabbitmq/heartbeat" value:1 unit:"boolean" </code>
- Service Broker heartbeat: <code> "/p-rabbitmq/service_broker/heartbeat" value:1 unit:"boolean" </code>

## <a id="metrics"></a>Metrics

The Firehose exposes the RabbitMQ and HAProxy metrics, and can direct these metrics to an external endpoint of your choice.

The metrics polling interval defaults to 30 seconds. This can be changed by navigating to the bottom of RabbitMQ cluster configuration page and entering a new value in the Metrics polling interval configuration box.  **Metrics polling interval (min: 10)**.

<%= image_tag("images/metrics_polling.png") %>

The emitted metrics follow the format of the example below:

```
origin:"p-rabbitmq" eventType:ValueMetric timestamp:1441188462382091652 deployment:"cf-rabbitmq" job:"cf-rabbitmq-node" index:"0" ip:"10.244.3.46" valueMetric: < name:"/p-rabbitmq/rabbitmq/system/memory" value:1024 unit:"MB">
```

###<a id="rabbitmq-metrics"></a>RabbitMQ Metrics

The table below shows the current list of RabbitMQ metrics emitted and their description.

<p class="note"><strong>Note</strong>: The name space for the metrics follows the format <code>/CF-SERVICE-NAME/NODE-TYPE/METRIC-NAME</code>.</p>

<table>
    <tr>
        <th>Name Space</th>
        <th>Unit</th>
        <th>Description</th>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/erlang/erlang_processes</code></td>
        <td>count</td>
        <td>The number of Erlang processes</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/system/memory</code></td>
        <td>MB</td>
        <td>The memory in MB used by the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/connections/count</code></td>
        <td>count</td>
        <td>The total number of connections to the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/consumers/count</code></td>
        <td>count</td>
        <td>The total number of consumers registered in the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/delivered</code></td>
        <td>count</td>
        <td>The total number of messages with the status <code>deliver_get</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/delivered_no_ack</code></td>
        <td>count</td>
        <td>The number of messages with the status <code>deliver_no_ack</code> on the node</td>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/delivered_rate</code></td>
        <td>rate</td>
        <td>The rate at which messages are being delivered to consumers or clients on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/published</code></td>
        <td>count</td>
        <td>The total number of messages with the status <code>publish</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/published_rate</code></td>
        <td>rate</td>
        <td>The rate at which messages are being published by the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/redelivered</code></td>
        <td>count</td>
        <td>The total number of messages with the status <code>redeliver</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/redelivered_rate</code></td>
        <td>rate</td>
        <td>The rate at which messages are getting the status <code>redeliver</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/got _no_ack</code></td>
        <td>count</td>
        <td>The number of messages with the status <code>get_no_ack</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/get _no_ack_rate</code></td>
        <td>rate</td>
        <td>The rate at which messages get the status <code>get_no_ack</code> on the node</td>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/pending</code></td>
        <td>count</td>
        <td>The number of messages with the status <code>messages_unacknowledged</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/system/file descriptors</code></td>
        <td>count</td>
        <td>The number of open file descriptors on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/exchanges/count</code></td>
        <td>count</td>
        <td>The total number of exchanges on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/messages/available</code></td>
        <td>count</td>
        <td>The total number of messages with the status <code>messages_ready</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/queues/count</code></td>
        <td>count</td>
        <td>The number of queues on the node</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/rabbitmq/channels/count</code></td>
        <td>count</td>
        <td>The number of channels on the node</td>
    </tr>
</table>

###<a id="haproxy-metrics"></a>HAProxy Metrics

The table below shows the current list of HAProxy metrics emitted and their description.

<p class="note"><strong>Note</strong>: The name space for the metrics follows the format <code>/CF-SERVICE-NAME/NODE-TYPE/METRIC-NAME</code>.</p>

<table>
    <tr>
        <th>Name Space</th>
        <th>Unit</th>
        <th>Description</th>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/haproxy/health/connections</code></td>
        <td>count</td>
        <td>The total number of concurrent front-end connections to the server</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/haproxy/backend/qsize/amqp</code></td>
        <td>size</td>
        <td>The total size of the AMQP queue on the server</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/haproxy/backend/retries/amqp</code></td>
        <td>count</td>
        <td>The number of AMQP retries to the server</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/haproxy/backend/ctime/amqp</code></td>
        <td>time</td>
        <td>The total time to establish the TCP AMQP connection to the server</td>
    </tr>
</table>

---
title: Troubleshooting
owner: London Services
---

This topic provides basic instructions for operators troubleshooting On-Demand RabbitMQ&reg; for PCF.


## <a id="create-instance"></a> Errors


### <a id="create-instance"></a> Instance Creation Errors

The following sections describe errors that occur when a developer tries to create an on-demand instance of the RabbitMQ for PCF service.

### create-instance

<table border='1' class='nice'>
<tr>
  <th width="22%">Error</th>
  <td>Developers cannot create instances of on-demand services. Errors they may report include:<br>
  <code>TK cannot create instance GUID TASK-ID</code><br>
  <code>TK cannot create instance GUID TASK-ID</code>
 </td>
</tr>
<tr>
  <th>Cause</th>
  <td>BOSH fails when trying to create a new VM</td>
</tr>
<tr>
  <th>Solution</th>
  <td>
    Any <code>create-instance</code>error a developer receives should include the BOSH Task ID for the instance creation job and the GUID of the half-created service instance. If the developer does not supply these, follow the instructions <a href="#determine-guid">Determine the Task ID and GUID of an Instance</a>.

    <ol><li>
      Run <code>bosh task TASK-ID</code> to show any instance creation task errors from BOSH. Possible errors include failure at the IaaS level and hitting your rate limit for the day.
    </li><li>
      If the BOSH task completed successfully, the problem was elsewhere. Set up a trace in your logging platform or search your syslog for the service instance GUID. This generates a series of log messages that tracks how far the instance creation request got.
    </li><li>
      Refer to the [Create Service Instance](https://docs.pivotal.io/on-demand-service-broker/concepts.html#create-service-instance) sequence diagram to see how PCF components create a service instance. Compare this successful sequence of component actions and messages with the trace from your logging platform.
    </li><li>
      To zero in on a specific failed component or unreceived message, test half of the sequence at a time and find out which half failed, then continue dividing in half and testing.
    </li></ol>
  </td>
</tr>
</table>

### <a id="stop"></a> _bosh stop_ Failure

If the `bosh stop` fails, you will likely get an error saying that the drain
script failed with:

```
result: 1 of 1 drain scripts failed. Failed Jobs: rabbitmq-server.
```

#### What do I do when bosh stop rabbitmq-server fails?

The drain script logs to `/var/vcap/sys/log/rabbtimq-server/drain.log`. If you
have a remote syslog configured, this will appear as the `rmq_server_drain`
program.

First, `bosh ssh` into the failing rabbitmq-server instance and start the
rabbimtq-server job by running `monit start rabbitmq-server`). You will not be
able to start the job via `bosh start` as this always runs the drain script first
and will fail since the drain script is failing. Once rabbitmq-server job is
running (confirm this via `monit status`), run `DEBUG=1`
`/var/vcap/jobs/rabbitmq-server/bin/drain`. This will tell you exactly why itâ€™s
failing.


### <a id="smoke"></a> Smoke Test Failure

If errors occur while the smoke tests run, they will be summarised at the end of the errand log output.
Detailed logs can be found where the failure occurs.

When encountering an error when running smoke tests, it can be helpful to search the log for other instances
of the error summary printed at the end of the tests, e.g. <code>Failed to target Cloud Foundry</code>.
Lookout for <code>TIP: ...</code> in the logs next to any error output for further troubleshooting hints.

## <a id="techniques"></a> Techniques


### <a id="determine-guid"></a> Determine the Task ID and GUID of an Instance

When debugging an instance of the on-demand RabbitMQ for PCF service, the following two identifiers are useful:

* The Task ID for the BOSH task that creates the service instance
* The GUID of instance that was not successfully created

This procedure retrieves these two values if you only know the service name and the org and space containing the instance.

1. Use the cf CLI to target and to log in to your deployment. See [Login](../cf-cli/getting-started.html#login) the *Getting Started with the cf CLI* topic.
    <pre class="terminal">
    $ cf login -a https<span>://</span>api.example.com -u username<span>@</span>example.com
    API endpoint: https<span>://</span>api.example.com
    </pre>

1. Follow the directions to [SSH into Ops Manager](/customizing/trouble-advanced.html#ssh) in the *Advanced Troubleshooting with the BOSH CLI* topic. Use the following values:

    * **Certificate Location**: Use the file path on your local machine to the key pair used to install Ops Manager.
    * **BOSH Director IP Address**: Retrieve from the Ops Manager Director tile **Status** tab.
    * **BOSH Director Credentials**: Retrieve from the Ops Manager API or find it in the Ops Man Director tile **Credentials** tab > **Director Credentials**.

1. Continue following the *Advanced Troubleshooting* directions to [Log into BOSH](/customizing/trouble-advanced.html#log-in). 

1. From the Ops Manager Director VM you can now use the BOSH CLI to retrieve information about service instances from the BOSH Director VM.
    <pre class="terminal">
    $ bosh --ca-cert CERTIFICATE-LOCATON target BOSH-DIRECTOR-IP
    </pre>

1. Log into the space containing the instance or failed instance. 
    <pre class="terminal">
    $ cf login
    </pre>

1. Run `cf services` to see a listing of

cf services - only one line on each

cf service SERVICE-INSTANCE-NAME # more info on specific instance

bosh tasks recent

cf service SERVICE-INSTANCE-NAME --guid # to get GUID of instance

bosh tasks recent | grep GUID # first column gives you TASK-ID # for instance

bosh task TASK-ID # shows full error message

bosh task TASK-ID --raw # shows raw JSON of error

### <a id="stop"></a> Stop RabbitMQ

`bosh stop rabbitmq-server`

There are BOSH job lifecycle hooks which are only fired when rabbitmq-server is
stopped through BOSH. This will cleanly stop the RabbitMQ service and is the only supported method of stopping the service.

**DO NOT STOP RABBITMQ VIA MONIT**

Do not log into the virtual machine running the RabbitMQ service and stop the RabbitMQ service via monit. It is a potentially dangerous operation as it will kill the RabbitMQ service immediately.

#### What happens when I run bosh stop rabbitmq-server?

BOSH starts the shutdown sequence from the bootstrap instance.

We start by telling the RabbitMQ application to shutdown and then shutdown the
Erlang VM within which it is running. If this succeeds, we run the following
checks to ensure that the RabbitMQ application and Erlang VM have stopped:

1. If `/var/vcap/sys/run/rabbitmq-server/pid` exists, check that the PID inside
this file does not point to a running Erlang VM process. Notice that we are
tracking the Erlang PID and not the RabbitMQ PID.
1. Check that `rabbitmqctl` does not return an Erlang VM PID

Once this completes on the bootstrap instance, BOSH will continue the same
sequence on the next instance. All remaining rabbitmq-server instances will be
stopped one by one.

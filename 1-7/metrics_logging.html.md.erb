---
breadcrumb: RabbitMQ for Pivotal Cloud Foundry Documentation
title: Logging, Heartbeats, and Metrics
owner: London Services
---

## <a id="logging"></a>Logging

In RabbitMQ&reg; for Pivotal Cloud Foundry (PCF) 1.6.0 and above, you can designate an external syslog endpoint for RabbitMQ logs through Ops Manager at deployment time by performing the following steps:

1. From the Ops Manager Installation Dashboard, click the RabbitMQ tile.
1. In the RabbitMQ tile, click the **Settings** tab.
1. Click **Syslog**.
1. Enter your syslog address and port.
1. Click **Save**.
1. Return to the Ops Manager Installation Dashboard and click **Apply Changes** to redeploy with the changes.

A correctly configured system emits metrics for all RabbitMQ and HAProxy nodes deployed in the service. You can identify logs from individual nodes by their index, which corresponds to the index of the RabbitMQ nodes displayed in Ops Manager:

* The logs for RabbitMQ server nodes follow the format <code>[job=rabbitmq-server-partition-GUID index=X]</code>
* The logs for HAproxy nodes follow the format <code>[job=rabbitmq-haproxy-partition-GUID index=X]</code>
* The logs for the RabbitMQ service broker follow the format <code>[job=rabbitmq-broker-partition-GUID index=X]</code>

RabbitMQ and HAProxy servers are configured to log at the <code>info</code> level, and capture errors, warnings and informational messages.

## <a id="heartbeats"></a>Heartbeats

In RabbitMQ for PCF 1.6 and above, the key system components periodically emit heartbeats for RabbitMQ server nodes, HAProxy nodes, and the Service Broker. The heartbeats are Boolean metrics: <code>1</code> means the system is available, and <code>0</code> or the absence of a heartbeat metric means the service is not responding and should be investigated.

The heartbeats are visible on the firehose and look as follows:

- HAProxy heartbeat: <code> "/p-rabbitmq/haproxy/heartbeat" value:1 unit:"boolean" </code>
- RabbitMQ heartbeat: <code> "/p-rabbitmq/rabbitmq/heartbeat" value:1 unit:"boolean" </code>
- Service Broker heartbeat: <code> "/p-rabbitmq/service_broker/heartbeat" value:1 unit:"boolean" </code>

## <a id="metrics"></a>Metrics

The PCF firehose exposes the RabbitMQ and HAProxy metrics, and can direct these metrics to an external endpoint of your choice.

### Configuring Secure Communication
RabbitMQ for PCF v1.7.13 adds the ability for the operator to turn on/off TLS communications for metrics, via a `Use non-secure communication for metrics` checkbox on the metrics configuration
page in Ops Manager. You should configure this checkbox for different versions of PCF as follow:

* **PCF v1.8**: This checkbox must be checked for metrics to be emitted to the
Firehose.

* **PCF v1.9**: Metrics communications are secure by default but will work in a non-secure mode.

* **PCF v1.10 and later**: Metrics communications are secure by
default so this checkbox must be unchecked for metrics to be emitted to the Firehose.

![Configuring Secure Metrics](Enable-TLS.png)

If this checkbox is incorrectly set, this error `Cannot generate manifest for product RabbitMQ: Error in (( .properties.metrics_tls_disabled.value ? ..cf.etcd_server.ips : .properties.etcd_machines.parsed_strings )): unknown job "etcd_server" (Product "RabbitMQ" / Job: nil)` will be displayed:
![Configuring Secure Metrics error](TLS-error.png)

### Polling Interval

The metrics polling interval defaults to 30 seconds. This can be changed by navigating to the bottom of RabbitMQ cluster configuration page and entering a new value in the Metrics polling interval configuration box.  **Metrics polling interval (min: 10)**.

<%= image_tag("images/metrics_polling.png") %>

The emitted metrics follow the format of the example below:

```
origin:"p-rabbitmq" eventType:ValueMetric timestamp:1441188462382091652 deployment:"cf-rabbitmq" job:"cf-rabbitmq-node" index:"0" ip:"10.244.3.46" valueMetric: < name:"/p-rabbitmq/rabbitmq/system/memory" value:1024 unit:"MB">
```

###<a id="rabbitmq-metrics"></a>RabbitMQ Metrics

The table below shows the current list of RabbitMQ metrics emitted and their description.

<p class="note"><strong>Note</strong>: The name space for the metrics follows the format <code>/CF-SERVICE-NAME/NODE-TYPE/METRIC-NAME</code>.</p>

<table>
	<tr>
		<th>Name Space</th>
		<th>Unit</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/erlang/erlang_processes</code></td>
		<td>count</td>
		<td>The number of Erlang processes</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/system/memory</code></td>
		<td>MB</td>
		<td>The memory in MB used by the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/connections/count</code></td>
		<td>count</td>
		<td>The total number of connections to the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/consumers/count</code></td>
		<td>count</td>
		<td>The total number of consumers registered in the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/delivered</code></td>
		<td>count</td>
		<td>The total number of messages with the status <code>deliver_get</code> on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/delivered_no_ack</code></td>
		<td>count</td>
		<td>The number of messages with the status <code>deliver_no_ack</code> on the node</td>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/delivered_rate</code></td>
		<td>rate</td>
		<td>The rate at which messages are being delivered to consumers or clients on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/published</code></td>
		<td>count</td>
		<td>The total number of messages with the status <code>publish</code> on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/published_rate</code></td>
		<td>rate</td>
		<td>The rate at which messages are being published by the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/redelivered</code></td>
		<td>count</td>
		<td>The total number of messages with the status <code>redeliver</code> on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/redelivered_rate</code></td>
		<td>rate</td>
		<td>The rate at which messages are getting the status <code>redeliver</code> on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/got _no_ack</code></td>
		<td>count</td>
		<td>The number of messages with the status <code>get_no_ack</code> on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/get _no_ack_rate</code></td>
		<td>rate</td>
		<td>The rate at which messages get the status <code>get_no_ack</code> on the node</td>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/pending</code></td>
		<td>count</td>
		<td>The number of messages with the status <code>messages_unacknowledged</code> on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/system/file descriptors</code></td>
		<td>count</td>
		<td>The number of open file descriptors on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/exchanges/count</code></td>
		<td>count</td>
		<td>The total number of exchanges on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/messages/available</code></td>
		<td>count</td>
		<td>The total number of messages with the status <code>messages_ready</code> on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/queues/count</code></td>
		<td>count</td>
		<td>The number of queues on the node</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/rabbitmq/channels/count</code></td>
		<td>count</td>
		<td>The number of channels on the node</td>
	</tr>
</table>

###<a id="haproxy-metrics"></a>HAProxy Metrics

The table below shows the current list of HAProxy metrics emitted and their description.

<p class="note"><strong>Note</strong>: The name space for the metrics follows the format <code>/CF-SERVICE-NAME/NODE-TYPE/METRIC-NAME</code>.</p>

<table>
	<tr>
		<th>Name Space</th>
		<th>Unit</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/haproxy/health/connections</code></td>
		<td>count</td>
		<td>The total number of concurrent front-end connections to the server</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/haproxy/backend/qsize/amqp</code></td>
		<td>size</td>
		<td>The total size of the AMQP queue on the server</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/haproxy/backend/retries/amqp</code></td>
		<td>count</td>
		<td>The number of AMQP retries to the server</td>
	</tr>
	<tr>
		<td><code>/p-rabbitmq/haproxy/backend/ctime/amqp</code></td>
		<td>time</td>
		<td>The total time to establish the TCP AMQP connection to the server</td>
	</tr>
</table>

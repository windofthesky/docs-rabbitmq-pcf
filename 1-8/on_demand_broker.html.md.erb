---
breadcrumb: RabbitMQ for Pivotal Cloud Foundry Documentation
title: Configuring and Managing RabbitMQ&reg;  Dedicated Instances - Experimental
owner: London Services
---

## What are dedicated instances and when to use them with RabbitMQ
Right now (for PCF RabbitMQ versions before 1.8.0), the RabbitMQ Service
instances correspond to a unique RabbitMQ Vhost on the multi-tenant RabbitMQ
cluster. In PCF RabbitMQ 1.8.0, we are introducing [On-Demand Broker
(ODB)](/on-demand-service-broker/index.html) support (experimental). That means
that a new cluster can be created and decicated to a single application
(single-tenant).

## Resource considerations

## Tile configurations
### Configuration options
The following options are available for the RabbitMQ on demand broker:

- `Enable this plan`: check this to enable dedicated RabbitMQ instances on CF marketplace.
- `Plan name`: the service name that will appear in the CF marketplace.
- `Plan description`: the plan description that will appear in the CF marketplace.
- `Plan features`: the features associated with this plan that will appear in the CF marketplace.
- `Service instance quota`: The maximum number of services that can be created by the on demand broker.

<%= image_tag("images/config_rabbitmq_odb.png") %>

### Enabling the on demand service broker
In order to enable the ODB you need to ckeck the `Enable this plan` checkbox in the *Settings > Dedicated Instance: Single Node Plan* section in the RabbitMQ tile.

Note: if the ODB feature is not enabled, the ODB will be deployed alongside with RabbitMQ installation. Nevertheless, it is not going to be available in the marketplace.
### Enabling and monitoring servcie instance quotas
### Explanation of resource types and requirements
It is possible to configure the VM type for RabbitMQ and HAproxy instances by using the fields `RabbitMQ VM Type` and `HAproxy VM Type` respectivelly. It is also possible to chose the size of the persistent disk that is going to be attached the RabbitMQ instances. It is also necessary to chose the Availability Zone (AZ) the service instance is going to live in.

<%= image_tag("images/config_rabbitmq_odb_resources.png") %>

### Detail of the solo plan
In the `Solo` plan there will be only one single node in the cluster. There is still have an `HAproxy` associated with the cluster.
### Syslog configuration (shared with multi-tenant) and example of log output with deployment name as a tag

### Explanation of the smoke test errand

RabbitMQ for PCF runs a set of smoke tests during installation to confirm system health.

#### Smoke Test Steps

The smoke tests perform the following for each available service plan:

1. Targets the org <code>system</code> and creates a space to run the tests.
1. Deploys an instance of the [CF RabbitMQ Example App](https://github.com/pivotal-cf/rabbit-example-app) to this space
1. Creates a RabbitMQ service instance and binds it to the CF RabbitMQ Example App
1. Checks that the CF RabbitMQ Example App can write to and read from the RabbitMQ service instance
1. Cleans up all deployed application and all its service bindings. Finally, the cf space is deleted.

## How to upgrade dedicated instances
### Stemcell deployments
### Upgrade RabbitMQ
### Delete RabbitMQ
On-Demand Broker provides a BOSH to delete all the On-Demand Broker deployed
instances. After setting the deployment to the On-Demand Broker in BOSH, the
command to delete all the instances is `bosh run errand delete-sub-deployments`.
This command runs the `bosh delete <deployment>` serially on the deployments,
it is very deructive and the operation cannot be undone.


## Entries in the VCAP_SERVICES Environment Variable
Applications running in Cloud Foundry gain access to the bound service instances via an environment variable credentials hash called `VCAP_SERVICES`. An example hash is show below:

<pre><code>
{
    "p-rabbitmq": [{
        "credentials": {
            "dashboard_url": "http://pivotal-rabbitmq.your.pcf.example.com/#/login/b5d0ad14-4352-48e8-8982-d5b1d257029f/tavk86pnnns1ddiqpsdtbchurn",
            "username": "b5d0ad14-4352-48e8-8982-d5b1d257029f",
            "password": "tavk86pnnns1ddiqpsdtbchurn",
            "protocols": {
                "amqp": {
                    "password": "tavk86pnnns1ddiqpsdtbchurn",
                    "username": "b5d0ad14-4352-48e8-8982-d5b1d257029f",
                    "uris": [
                        "amqp://b5d0ad14-4352-48e8-8982-d5b1d257029f:tavk86pnnns1ddiqpsdtbchurn@10.0.0.41:5672/62e5ab21-7b38-44ac-b139-6aa97af01cd7",
                        "amqp://b5d0ad14-4352-48e8-8982-d5b1d257029f:tavk86pnnns1ddiqpsdtbchurn@10.0.0.51:5672/62e5ab21-7b38-44ac-b139-6aa97af01cd7"
                    ]
                }
            }
        }
    }]
}
</code></pre>

The `credentials` property can be used as follows:

* The top level properties `username`, `password` provide access to the AMQP 0.9.1 protocol.

* A more flexible approach is provided by the `credentials.protocols` property, which has a key per enabled protocol. The possible key is `amqp`.

* The values associated with each of these keys gives access credentials specific to each protocol. In all cases, URIs are provided, along with the individual components.


## How to provision a dedicated instance as an App Developer

